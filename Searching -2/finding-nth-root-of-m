int NthRoot(int n, int m) {
    if (n == 1)
        return m;
    if (m == 0 || m == 1)
        return m;

    int low = 1;
    int high = m;

    while (low <= high) {
        int mid = low + (high - low) / 2;
        int temp = 1;
        
        
        for (int i = 0; i < n; ++i) {
            // Check for overflow
            if (temp > m / mid) {
                temp = -1;
            }
            temp *= mid;
        }

        if (temp == m)
            return mid;
        else if (temp == -1 || temp > m)
            high = mid - 1;
        else
            low = mid + 1;
    }

    return -1;
}
